function data = binary_file_write(instance, variable, start, data)

% open file
fd = fopen(instance.filename,'r+');

% get count
ndims = length( instance.structure.variables.(variable) );
count = size(data);
count(end+1:ndims) = 1;
count = count(1:ndims);

% get position and dimensions
pos = instance.positions.(variable);
dims = instance.sizes.(variable);

% invert everything due to Matlab's memory layout
dims = flipud(dims(:));
start = flipud(start(:)) - ones(size(dims));
count = flipud(count(:));

% check count
if ~all(start+count<=dims)
  error('start+count>dims');
end

% get variable dimensions
%dims  = 7*5*6
%start = 2,2,3
%count = 2,3,6

% dims  = 7*6*5*5*5*5
% start = 4,2,3,2,1,1
% count = 1,3,1,2,5,5
%
% 2*5*5 blocks can be written at one time
% loop goes over first three indices (loopuntil=3)
%
% 4,2,3 => write to pos (3-1)*5*5*5 + (2-1)*5*5*5*5 + (4-1)*6*5*5*5*5 = ( (3-1) + ((2-1) + (4-1)*6)*5 )*5*5*5
% 4,3,3 => write to pos (3-1)*5*5*5 + (3-1)*5*5*5*5 + (4-1)*6*5*5*5*5 = ( (3-1) + ((2-1) + (4-1)*6)*5 )*5*5*5
% 4,4,3 => write to pos (3-1)*5*5*5 + (4-1)*5*5*5*5 + (4-1)*6*5*5*5*5 = ( (3-1) + ((2-1) + (4-1)*6)*5 )*5*5*5
%
% pos = 0
% pos = ( pos + cur(1)-1 )*dims(1+1)
% pos = ( pos + cur(2)-1 )*dims(2+1)
% pos = cur(loopuntil)-1
% pos *= prod(dims(loopuntil+1:end))

% 
loopuntil = find(count~=dims, 1, 'last')-1;

current = start(1:loopuntil);
data_left = numel(data);
while 1
  current
  % seek to correct file position
  cur_bytes = 0;
  for ii=1:loopuntil
     cur_bytes = ( cur_bytes + current(ii) ) * dims(ii+1);
  end
  cur_bytes = cur_bytes + start(loopuntil+1);
  cur_bytes = cur_bytes * prod(dims(loopuntil+2:end)) * 8;

  fseek(fd, cur_bytes, 'bof');

  % construct index for accessing data array
  idx = {};
  for ii=loopuntil+2:length(start)
    idx{end+1} = ':';
  end
  idx{end+1} = 1:count(loopuntil+1);
  for ii=loopuntil:-1:1
     idx{end+1} = current(ii)-start(ii)+1;
  end

  % write to file
  data_left = data_left - fwrite(fd, data(idx{:}), 'double');

  % break if all data written
  if data_left==0
    break;
  end

  % increment current
  for ii=loopuntil:-1:1
    if current(ii)<start(ii)+count(ii)-1
      current(ii) = current(ii)+1;
      current(ii+1:end) = start(ii+1:length(current));
      break;
    end
  end
end
